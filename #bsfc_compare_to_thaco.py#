# -*- coding: utf-8 -*-
"""
Compare brightness results for BSFC vs. THACO. 

@author: sciortino
"""

import numpy as np
import matplotlib.pyplot as plt
plt.ion()

import bsfc_helper
import cPickle as pkl
import bsfc_autocorr
import pdb
import corner
import bsfc_main
import bsfc_slider
import bsfc_autocorr
import scipy
import sys
import time as time_
import pdb
import itertools
import os
import shutil

# first command line argument gives shot number
shot = int(sys.argv[1])

# second command line argument gives number of MCMC steps 
nsteps = int(sys.argv[2])

if shot==1121002022:
    t_min=0.7; t_max=0.8
elif shot==1120914036:
    t_min=1.05; t_max=1.27
elif shot==1101014019:
    t_min=1.24; t_max=1.4
elif shot==1101014029:
    t_min=1.17; t_max=1.3
elif shot==1101014030:
    t_min=1.17; t_max=1.3
elif shot==1100305019:
    t_min=0.98; t_max=1.2
else:
    # define more lines!
    raise Exception('Times of interest not set for this shot!')


# load BSFC moments:
with open('./bsfc_fits/moments_%d_%dsteps_tmin%f_tmax%f.pkl'%(shot,nsteps,t_min,t_max),'rb') as f:
    gathered_moments=pkl.load(f)


tidx_min = np.argmin(np.abs(mf.time - t_min))
tidx_max = np.argmin(np.abs(mf.time - t_max))
time_sel= mf.time[tidx_min: tidx_max]

# get individual spectral moments 
moments_vals = np.empty((tidx_max-tidx_min,mf.maxChan,3))
moments_stds = np.empty((tidx_max-tidx_min,mf.maxChan,3))
moments_vals[:] = None
moments_stds[:] = None

for tbin in range(tidx_max-tidx_min):
    for chbin in range(mf.maxChan):
        moments_vals[tbin,chbin,0] = gathered_moments[tbin,chbin][0][0]
        moments_stds[tbin,chbin,0] = gathered_moments[tbin,chbin][1][0]
        moments_vals[tbin,chbin,1] = gathered_moments[tbin,chbin][0][1]
        moments_stds[tbin,chbin,1] = gathered_moments[tbin,chbin][1][1]
        moments_vals[tbin,chbin,2] = gathered_moments[tbin,chbin][0][2]
        moments_stds[tbin,chbin,2] = gathered_moments[tbin,chbin][1][2]
        
# exclude values with brightness greater than a certain value
BR_THRESH = 10.0  #just a parameter
moments_vals[:,:,0][moments_vals[:,:,0] > BR_THRESH] = np.nan
moments_stds[:,:,0][moments_vals[:,:,0] > BR_THRESH] = np.nan
moments_vals[:,:,1][moments_vals[:,:,0] > BR_THRESH] = np.nan
moments_stds[:,:,1][moments_vals[:,:,0] > BR_THRESH] = np.nan
moments_vals[:,:,2][moments_vals[:,:,0] > BR_THRESH] = np.nan
moments_stds[:,:,2][moments_vals[:,:,0] > BR_THRESH] = np.nan

# normalize brightness to largest value
idx1,idx2 = np.unravel_index(np.nanargmax(moments_vals[:,:,0]), moments_vals[:,:,0].shape)
max_br = moments_vals[idx1,idx2,0]
max_br_std = moments_stds[idx1,idx2,0]

moments_vals[:, :,0] = moments_vals[:,:,0]/ max_br
moments_stds[:,:,0] = scipy.sqrt((moments_stds[:,:,0] / max_br)**2.0 + ((moments_vals[:,:,0] / max_br)*(max_br_std / max_br))**2.0)
